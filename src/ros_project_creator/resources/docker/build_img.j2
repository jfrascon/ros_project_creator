#!/usr/bin/env python3

import argparse
from datetime import datetime, timezone
import os
import platform
from pathlib import Path
import re
import shutil
import subprocess
import sys
import time

if __name__ == "__main__":

    SUPPORTED_DOCKER_PLATFORMS: dict[str, dict[str, list[str] | str]] = {
        {% for platform in supported_docker_platforms.values() %}
        "{{ platform.get_id() }}":
        {
            "arch": [{{ platform.get_architectures() | map('tojson') | join(', ') }}],
            "desc": "{{ platform.get_description() }}"
        }{{ "," if not loop.last else "" }}

        {% endfor %}
    }

    def cleanup_local_registry(local_push_base_img: str) -> None:
        """
        Stop the temporary local Docker registry and remove the local image tag.
        """
        print("Stopping and removing temporary local registry")
        subprocess.run(["docker", "stop", "temp_registry"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

        if local_push_base_img:
            print(f"Removing image tag '{local_push_base_img}'")
            subprocess.run(["docker", "image", "rm", local_push_base_img])

    def container_exists(name: str) -> bool:
        result = subprocess.run(["docker", "container", "inspect", name],
                                stdout=subprocess.DEVNULL,
                                stderr=subprocess.DEVNULL)

        return result.returncode == 0

    {% raw %}
    def get_bridge_gateway() -> str:
        result = run_command(
            ["docker", "network", "inspect", "bridge", "-f", "{{ ( index .IPAM.Config 0 ).Gateway }}"],
            capture=True
        )

        return result.stdout.strip()
    {% endraw %}

    def help_supported_docker_platforms() -> str:
        lines = ["Supported platforms:"]

        for docker_platform, meta in sorted(SUPPORTED_DOCKER_PLATFORMS.items()):
            lines.append(f"    {docker_platform:<12} - {meta['desc']}")

        return "\n".join(lines)

    def image_exists_locally(image: str) -> bool:
        result = subprocess.run(["docker", "image", "inspect", image],
                                stdout=subprocess.DEVNULL,
                                stderr=subprocess.DEVNULL)

        return result.returncode == 0

    def import_dependencies(context_dir: Path, log_file: Path) -> None:
        """
        If deps.repos and the 0_deps directory exist, and the `rv` tool is available,
        recursively import dependencies into the 0_deps directory using `rv`.

        The output is printed in real-time to the terminal and also written to `log_file`.

        Raises:
            subprocess.CalledProcessError if 'rv import' returns a non-zero code.
        """
        deps_file = context_dir.joinpath("deps.repos")
        deps_target_dir = context_dir.joinpath("src", "0_deps")

        if not deps_file.is_file():
            print(f"No dependency file found at '{deps_file}', skipping dependency import")
            return

        if not deps_target_dir.is_dir():
            print(f"Target directory '{deps_target_dir}' does not exist, skipping dependency import")
            return

        if shutil.which("rv") is None:
            print("Command 'rv' not found in PATH, skipping dependency import")
            print("Installation instructions: https://github.com/ErickKramer/ripvcs?tab=readme-ov-file#-installation")
            return

        print(f"Importing dependencies from '{deps_file}' into '{deps_target_dir}'")

        cmd = ["rv", "import", "-i", str(deps_file), "-r", str(deps_target_dir)]

        with subprocess.Popen(
            cmd,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            text=True,
            bufsize=1
        ) as process, open(log_file, "w") as log:
            for line in process.stdout:
                print(line, end="", flush=True)
                log.write(line)

            process.wait()
            if process.returncode != 0:
                raise subprocess.CalledProcessError(
                    returncode=process.returncode,
                    cmd=cmd
                )

    def is_docker_platform_supported(docker_platform: str) -> bool:
        return docker_platform in SUPPORTED_DOCKER_PLATFORMS

    def is_valid_docker_image_name(name: str) -> bool:
        """
        Validate a Docker image name according to Docker's official naming rules.

        Format:
            [HOST[:PORT_NUMBER]/]PATH[:TAG]

        See: https://docs.docker.com/get-started/docker-concepts/building-images/build-tag-and-publish-an-image/#tagging-images
        """

        # Optional registry prefix: host (lower‑case letters, digits, dots, dashes)
        # with optional :PORT, followed by a slash.
        host_and_port_prefix = r"([a-z0-9.-]+(:[0-9]+)?/)?"

        # A separator inside a path component can be:
        #   • a single dot
        #   • one or two underscores
        #   • one or more dashes
        path_separator = r"(?:\.|_{1,2}|-+)"

        # A path component must start and end with an alphanumeric character,
        # separators are allowed only between alphanumerics.
        path_component = rf"[a-z0-9]+(?:{path_separator}[a-z0-9]+)*"

        # PATH = one or more components separated by '/'
        path_re = rf"{path_component}(/{path_component})*"

        # Optional TAG: colon + allowed characters (letters, digits, '_', '.', '-')
        tag_re = r"(:[a-zA-Z0-9_.-]+)?"

        # Full regex combining all parts
        full_re = re.compile(rf"^{host_and_port_prefix}{path_re}{tag_re}$")

        return bool(full_re.match(name))

    def print_error(message):
        # ANSI escape codes for colored output
        RED = "\033[31m"
        RESET = "\033[0m"
        print(f"{RED}{message}{RESET}")

    def run_command(cmd: list[str], capture: bool = False) -> subprocess.CompletedProcess:
        return subprocess.run(cmd, check=True, text=True, capture_output=capture)

    def setup_local_base_image(base_img: str) -> tuple[str, str]:
        print("Pull not requested")

        if not image_exists_locally(base_img):
            print(f"Base image '{base_img}' not found locally")
            raise RuntimeError("Missing local image")

        print("Setting up temporary local registry")
        start_local_registry()

        if not wait_for_registry():
            print("Error: Local registry did not become available after 10 seconds")
            subprocess.run(["docker", "stop", "temp_registry"], stdout=subprocess.DEVNULL)
            raise RuntimeError("Registry not available")

        original_base_img = base_img
        local_push_base_img = f"localhost:5000/{original_base_img}"

        print(f"Tagging base image '{original_base_img}' to '{local_push_base_img}'")
        run_command(["docker", "image", "tag", original_base_img, local_push_base_img])
        run_command(["docker", "push", local_push_base_img])

        bridge_gw = get_bridge_gateway()
        build_base_img = f"{bridge_gw}:5000/{original_base_img}"

        print(f"Build base image set to '{build_base_img}'")

        return build_base_img, local_push_base_img


    def start_local_registry():
        if not image_exists_locally("registry:2"):
            print("Pulling 'registry:2' image")
            run_command(["docker", "pull", "registry:2"])
        elif container_exists("temp_registry"):
            run_command(["docker", "rm", "-f", "temp_registry"])

        run_command(["docker", "run", "-d", "--rm", "-p", "5000:5000", "--name", "temp_registry", "registry:2"])

    def wait_for_registry(timeout: int = 10) -> bool:
        print("Waiting for local registry to be available", end="")
        for i in range(timeout):
            result = subprocess.run(["curl", "-s", "http://localhost:5000/v2/"],
                                    stdout=subprocess.DEVNULL,
                                    stderr=subprocess.DEVNULL)

            if result.returncode == 0:
                print("\nLocal registry is ready")
                return True

            print(".", end="", flush=True)
            time.sleep(1)

        print()

        return False

    # ==============================================================================================
    # Execution
    # ==============================================================================================

    parser = argparse.ArgumentParser(
        description="{{ description }}",
        allow_abbrev=False,  # Disable prefix matching
        add_help=False,  # Add custom help message
        formatter_class=lambda prog: argparse.RawTextHelpFormatter(prog, max_help_position=38),
        # formatter_class=lambda prog: argparse.HelpFormatter(prog, max_help_position=35),
    )

    parser.add_argument(
        "-c",
        "--cache",
        action="store_true",
        help="Reuse cached layers to optimize the time and resources needed to build the image.",
    )

    parser.add_argument(
        "-p",
        "--pull",
        action="store_true",
        help=(
            "Checks if a newer version of the base image is available in the proper registry (e.g., Docker Hub).\n"
            "If a newer version is found, it downloads and uses it. If the latest version is already available.\n"
            "locally it will not download it again. Without --pull Docker uses the local copy of the base image.\n"
            "if it is available on the system. If no local copy exists, Docker will download it automatically.\n"
            "Usage of --pull is recommended to ensure an updated base image is used."
        ),
    )

    parser.add_argument(
        "-b",
        "--base-img",
        type=str,
        default="{{ base_img }}",
        help=("Base image. Default is '{{ base_img }}'"),
    )

    parser.add_argument(
        "-P",
        "--platform",
        type=str,
        default="{{ docker_platform }}",
        help=(
            "Platform to use for the resulting Docker image.\n"
            f"{help_supported_docker_platforms()}\n"
            "Default is '{{ docker_platform }}'"
        ),
    )

    parser.add_argument(
        "-u",
        "--img-user",
        type=str,
        default="{{ img_user }}",
        help=(f"Active user to run containers for the resulting Docker image. Default is '{{ img_user }}'."),
    )

    parser.add_argument(
        "-i",
        "--img-id",
        type=str,
        default="{{ img_id }}",
        help=("Image ID for the resulting Docker image. Default is '{{ img_id }}'"),
    )

    parser.add_argument(
        "--no-import-deps",
        action="store_true",
        help=("Do not import dependencies from deps.repos.")
    )

    parser.add_argument("--meta-title", type=str, help='Title to include in the image\'s metadata (e.g "App")')

    parser.add_argument("--meta-desc", type=str, help="Description to include in the image's metadata")

    parser.add_argument("--meta-authors", type=str, help="Authors of the image")

    parser.add_argument("--meta-ver", type=str, help="Version of the image")

    parser.add_argument(
        "-h", "--help", action="help", default=argparse.SUPPRESS, help="Show this help message and exit"
    )

    args = parser.parse_args()
    args.base_img = args.base_img.strip() if args.base_img else ""
    args.platform = args.platform.strip() if args.platform else ""
    args.img_user = args.img_user.strip() if args.img_user else ""
    args.img_id = args.img_id.strip() if args.img_id else ""
    args.meta_title = args.meta_title.strip() if args.meta_title else ""
    args.meta_desc = args.meta_desc.strip() if args.meta_desc else ""
    args.meta_authors = args.meta_authors.strip() if args.meta_authors else ""
    args.meta_ver = args.meta_ver.strip() if args.meta_ver else ""

    if not is_valid_docker_image_name(args.base_img):
        print_error(f"Error: Invalid base image '{args.base_img}'")
        sys.exit(1)

    if not is_valid_docker_image_name(args.img_id):
        print_error(f"Error: Invalid image ID '{args.img_id}'")
        sys.exit(1)

    if not args.img_user:
        print_error("Error: User can't be empty")
        sys.exit(1)

    if not is_docker_platform_supported(args.platform):
        print_error(f"Error: The platform '{args.platform}' is not supported")
        sys.exit(1)

    docker_dir = {{docker_dir}}
    dockerfile = docker_dir.joinpath("Dockerfile")

    if not dockerfile.is_file():
        print_error(f"Error: File '{dockerfile.resolve()}' is required")
        sys.exit(1)

    context_dir = {{context_dir}}

    if not os.path.isdir(context_dir):
        print_error(f"Error: Directory '{context_dir}' is required")
        sys.exit(1)

    src_dockerignore = docker_dir.joinpath("dockerignore")
    src_dockerignore_exists = src_dockerignore.is_file()

    # The build process requires the .dockerignore file to be in the root of the context path.
    dst_dockerignore = context_dir.joinpath(".dockerignore")
    dst_dockerignore_exists = dst_dockerignore.is_file()

    dockerignore_copied = False
    docker_ignore_msg = None

    if dst_dockerignore_exists:
        docker_ignore_msg = f"The build process will use the dockerignore file '{dst_dockerignore.resolve()}'"
    elif src_dockerignore_exists:
        try:
            shutil.copy(src_dockerignore, dst_dockerignore)
            dockerignore_copied = True
            docker_ignore_msg = f"The build process will use the dockerignore file '{src_dockerignore.resolve()}'"
        except Exception as e:
            print_error(f"Error: {e}")
            sys.exit(1)
    else:
        docker_ignore_msg = "The build process will not use a .dockerignore file"

    # We want to use volume mount during build, which will look like this:
    # RUN --mount=type=bind,source=...,target=... && <command>
    # This requires the use of BuildKit (https://docs.docker.com/build/buildkit/), which is default
    # build behavior for newer Docker clients, and includes improved build functionality.
    # However, docker-py doesn't support BuildKit, and has an issue open for almost 6 years
    # (https://github.com/docker/docker-py/issues/2230) so it doesn't seem like it is being added.
    # Therefore, we use the subprocess module to call docker build... so that we can enable
    # BuildKit, and thus mount volume during build.

    creation_time = datetime.now(timezone.utc).strftime("%Y-%m-%d_%H-%M-%S")

    # Enables Docker BuildKit for advanced build features.
    os.environ["DOCKER_BUILDKIT"] = "1"
    cmd = [
        "docker",
        "buildx",
        "build",
        "--builder",
        "docker_multiarch_builder",
        "--platform",
        f"{args.platform}",
        "--file",
        str(dockerfile.resolve()),
    ]

    # Ensure all empty strings are not included in the command.
    if args.pull:
        build_base_img = args.base_img
        local_push_base_img = ""
        cmd.append("--pull")
    else:
        try:
            build_base_img, local_push_base_img = setup_local_base_image(args.base_img)
        except Exception as e:
            print_error(f"Error: {e}")
            sys.exit(1)

    if not args.cache:
        cmd.append("--no-cache")

    cmd.extend(["--progress=plain"])

    cmd.extend(["--build-arg", f"BASE_IMG={build_base_img}"])
    cmd.extend(["--build-arg", f"REQUESTED_USER={args.img_user}"])
    cmd.extend(["--build-arg", "ROS_DISTRO={{ ros_distro }}"])
    cmd.extend(["--build-arg", "ROS_VERSION={{ ros_version }}"])
    cmd.extend(["--build-arg", "USE_NVIDIA_SUPPORT=false"])

    if args.meta_title:
        cmd.extend(["--label", f"org.opencontainers.image.title={args.meta_title}"])

    if args.meta_desc:
        cmd.extend(["--label", f"org.opencontainers.image.description={args.meta_desc}"])

    if args.meta_authors:
        cmd.extend(["--label", f"org.opencontainers.image.authors={args.meta_authors}"])

    cmd.extend(
        [
            "--label",
            f"org.opencontainers.image.created={creation_time}",
            "--tag",
            args.img_id,
            "--load",
            f"{str(context_dir.resolve())}",
        ]
    )

    log_dir = Path("/tmp")
    img_id_sanitized = args.img_id.replace(":", "_")
    timestamp = datetime.now(timezone.utc).strftime("%Y-%m-%d_%H-%M-%S")
    log_prefix = f"build_img_{img_id_sanitized}_{timestamp}"

    complete_log_file = log_dir.joinpath(f"{log_prefix}.log")
    specific_log_file = log_dir.joinpath(f"{log_prefix}_specific.log")

    print(f"Building the Docker image '{args.img_id}' for the project '{{ project_id }}', using base image '{args.base_img}', for a platform '{args.platform}', with active user '{args.img_user}' and the fixed ROS{{ ros_version }} distro '{{ ros_distro }}'")
    print(f"{docker_ignore_msg}\n")

    # The script exposes to the user the option --no-import-deps to skip the import of dependencies, assuming that
    # most of the time the user will want to import them, and only a few times will want to skip them, so by providing
    # the option --no-import-deps we can save time to the user.
    import_deps = not args.no_import_deps

    if import_deps:
        print("Importing packages from deps.repos")
        try:
            import_dependencies(context_dir, complete_log_file)
        except subprocess.CalledProcessError as e:
            print_error(f"Error: {e}")
            sys.exit(1)

    print("Executing command:")
    print(" ".join(cmd))

    time.sleep(2)

    timestamp_pattern = re.compile(r"\[\d{4}-\d{2}-\d{2}_\d{2}-\d{2}-\d{2}\]")

    exit_code = 0

    try:
        # Start the process
        with subprocess.Popen(
            cmd,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,  # Combine stdout and stderr
            text=True,  # Decode directly to strings
            bufsize=1,  # Enable line buffering for real-time output
        ) as process, \
            open(complete_log_file, "w") as full_log, \
            open(specific_log_file, "w") as filtered_log:

            # Read each line of the subprocess's output as it is produced, i.e., in real-time.
            for line in process.stdout:
                print(line, end="")
                full_log.write(line)            # Full log

                if timestamp_pattern.search(line):
                    filtered_log.write(line)    # Timestamped lines only

            # Wait for the process to finish and check the exit code
            process.wait()
            exit_code = process.returncode

            if exit_code != 0:
                print_error(f"Build failed with exit code {exit_code}: {process.stderr.strip()}")
    except Exception as e:
        print_error(f"Error: {e}")
        exit_code = 1

    # Remove the copy for the .dockerignore file after the build process is finished, if needed.
    if dockerignore_copied:
        try:
            os.remove(dst_dockerignore)
        except Exception as e:
            print_error(f"Error: {e}")
            exit_code = 1

    if not args.pull:
        cleanup_local_registry(local_push_base_img)

    sys.exit(exit_code)
