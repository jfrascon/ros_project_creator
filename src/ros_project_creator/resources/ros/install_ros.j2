#!/bin/bash

# set -e

{% raw -%}
install_packages() {
    local packages=("$@")
    local sim_out
    local sim_rc
    local valid_packages=()
    local bad_packages=()
    local pkg

    apt-get update # Ensure the package list is up to date before simulating installation
    sim_out="$(apt-get --simulate --quiet --quiet --no-install-recommends -o Dpkg::Use-Pty=0 install "${packages[@]}" 2>&1)"
    sim_rc=$?

    if [ "${sim_rc}" -ne 0 ] && [ "${sim_rc}" -ne 100 ]; then
        log "Error: apt-get simulation failed unexpectedly (rc=${sim_rc})" 2
        exit 1
    fi

    if [ "${sim_rc}" -eq 0 ]; then
        valid_packages=("${packages[@]}")
    else
        mapfile -t bad_packages < <(
            grep -oP 'Unable to locate package \K\S+' <<<"${sim_out}"
        )

        for pkg in "${packages[@]}"; do
            if ! echo " ${bad_packages[*]} " | grep -q " ${pkg} "; then
                valid_packages+=("${pkg}")
            fi
        done
    fi

    if [ "${#bad_packages[@]}" -gt 0 ]; then
        log "Packages not installable: ${bad_packages[*]}" 2
    fi

    if [ "${#valid_packages[@]}" -gt 0 ]; then
        log "Installing packages: ${valid_packages[*]}"

        if ! apt-get install --yes --no-install-recommends "${valid_packages[@]}"; then
            log "Error: Failed to install some packages: ${valid_packages[*]}" 2
            exit 1
        fi
    fi
}
{% endraw %}

log() {
    local message="${1}"
    local fd="${2:-1}" # default to 1 (stdout) if not provided

    # Validate that fd is either 1 (stdout) or 2 (stderr)
    if [[ "${fd}" != "1" && "${fd}" != "2" ]]; then
        fd=1
    fi

    printf "[%s] %s\n" "$(date --utc '+%Y-%m-%d_%H-%M-%S')" "${message}" >&"${fd}"
}

remove_gpg_key_file() {
    local file="${1}"
    local deb_pattern="${2}"

    # Extracts the path after 'signed-by=' from lines matching the given APT deb_pattern.
    # - First grep filters lines matching deb_pattern
    # - Second grep extracts the value after signed-by=, excluding any trailing bracket or space
    # - Each resulting path is removed if it exists

    grep --extended-regexp "${deb_pattern}" "${file}" |
        grep --only-matching --perl-regexp 'signed-by=\K[^] ]+' |
        while IFS= read -r signed_by_path; do
            if [ -f "${signed_by_path}" ]; then
                log "Removing GPG key file '${signed_by_path}'"
                rm --force "${signed_by_path}"
            fi
        done
}

sanitize() {
    local ros_version_str="${1}"
    local url="http://packages.ros.org/${ros_version_str}/ubuntu"
    local version_codename="$(. /etc/os-release && echo "${VERSION_CODENAME}")"
    local ros_deb_pattern="^deb.*${url}[[:space:]]+${version_codename}[[:space:]]+main"

    # Search for any '.list' file containing a deb line with a ROS url.
    matched_files="$(find /etc/apt/ -type f -name '*.list' -exec grep --files-with-matches --extended-regexp "${ros_deb_pattern}" {} + 2>/dev/null)"

    # Iterate over the matched files and remove the GPG key file if it exists, and then remove the line
    # or the file.
    for matched_file in ${matched_files}; do
        if [ "${matched_file}" = "/etc/apt/sources.list" ]; then
            remove_gpg_key_file "${matched_file}" "${ros_deb_pattern}"
            log "ROS deb line found in the file '${matched_file}', removing matching lines"
            # Remove the line from the sources.list file.
            sed --in-place --regexp-extended "\#${ros_deb_pattern}#d" "${matched_file}"
        else
            remove_gpg_key_file "${matched_file}" "${ros_deb_pattern}"
            # Remove the file from sources.list.d.
            log "ROS deb line found in the file '${matched_file}', removing file"
            rm --force "${matched_file}"
        fi
    done
}

# --------------------------------------------------------------------------------------------------
# Start of the script
# --------------------------------------------------------------------------------------------------

ROS_DISTRO="${1}"
ROS_VERSION="${2}"
IMG_USER="${3}"
ros_versions_str=("ros" "ros2")

# THIS SCRIPT IS RUN BY ROOT WHEN BUILDING THE DOCKER IMAGE.
[ "$(id --user)" -ne 0 ] && {
    log "Error: root user must be active to run the script '$(basename "${BASH_SOURCE[0]}")'" 2
    exit 1
}

[ -z "${ROS_DISTRO}" ] && {
    log "Error: No ROS_DISTRO provided" 2
    exit 1
}

[ -z "${ROS_VERSION}" ] && {
    log "Error: No ROS_VERSION provided" 2
    exit 1
}

if [[ ! "${ROS_VERSION}" =~ ^(1|2)$ ]]; then
    log "Error: Invalid ROS version '${ROS_VERSION}'. Must be 1 or 2." 2
    exit 1
fi

[ -z "${IMG_USER}" ] && {
    log "Error: No IMG_USER provided" 2
    exit 1
}

ros_version_str="${ros_versions_str[$((ROS_VERSION - 1))]}"
ros_apt_source_package="${ros_version_str}-apt-source"
img_user_home="$(getent passwd "${IMG_USER}" | cut -d: -f6)"

[ -z "${img_user_home}" ] && {
    log "Error: User '${IMG_USER}' does not exist" 2
    exit 1
}

# Before proceding with the installation, check if there is already a ROS distro installed.
# Extract the installed ROS distributions from the dpkg output, ensuring no leading or trailing whitespace.
# If a ROS distro is installed in the system, the a package called ros-<distro>-ros-core exists.
ros_distro=$(dpkg --list | sed -nE 's/^ii\s+ros-([a-z]+)-ros-core.*$/\1/p' | tr '\n' ' ' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')

# Count the number of ROS distributions found
num_ros_distros=$(echo "${ros_distro}" | wc -w)

if [ "${num_ros_distros}" -gt 1 ]; then
    log "Error: More than one ROS distro is installed: ${ros_distro}" 2
    exit 1
fi

if [ "${num_ros_distros}" -eq 1 ] && [ "${ROS_DISTRO}" != "${ros_distro}" ]; then
    log "Error: Found ROS '${ros_distro}' installed, but ROS '${ROS_DISTRO}' was requested to install" 2
    exit 1
fi

# If the execution reaches this point, either num_ros_distros is 0, no ROS distro installed, or it is 1
# and the requested ROS distro is already installed.

# On the 1st of June 2025, the way to manage ROS gpg keys and sources changed. A new package for ROS
# key and repository management was introduced, called 'ros-apt-source', for ros1, and
#'ros2-apt-source', for ros2.
# Ref: https://discourse.ros.org/t/ros-signing-key-migration-guide/43937
# "This a big step towards a simpler key update path allowing the ROS project to rotate keys while keeping ROS users in
# sync as long as the they keep their system up to date!"

# We will remove any '.list' file containing the old 'deb lines' used to manage ROS repositories,
# which are no longer encouraged to use.
# The gpg files associated to these 'deb lines' will also be removed.
sanitize "${ros_version_str}"

# ROS packages to install.
packages=(
{{ ros_packages }}
)

apt-get update # Required to load the cache in the build container
# Install the apt-utils package first, to avoid warnings when installing packages if this package
# is not installed previously.
apt-get install --yes --no-install-recommends apt-utils
# Install the software-properties-common package, which provides the add-apt-repository command.
apt-get install --yes --no-install-recommends software-properties-common
# Now add-apt-repository is available, and we can add the universe repository that contains many
# of the packages we need. Next, the index is updated, and the system is upgraded to ensure all packages are up to date.
add-apt-repository --yes universe
apt-get update
apt-get install --yes --no-install-recommends curl gpg
apt-get dist-upgrade --yes

ros_list_file=""

# Check if the '${ros-apt-source package}' is installed.
if ! dpkg --status "${ros_apt_source_package}" >/dev/null 2>&1; then
    # ${ros_apt_source_package} is not installed.

    gpg_dir="/etc/apt/keyrings"
    gpg_file="${gpg_dir}/ros.gpg"

    if [ ! -d "${gpg_dir}" ]; then
        log "Creating directory '${gpg_dir}'"
        mkdir --verbose --parent "${gpg_dir}"
    fi

    log "Adding ROS GPG key to file '${gpg_file}'"
    curl --fail --silent --show-error --location https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc |
        gpg --dearmor --output "${gpg_file}"

    # Set correct permissions
    chmod 644 "${gpg_file}"

    version_codename="$(. /etc/os-release && echo "${VERSION_CODENAME}")"
    url="http://packages.ros.org/${ros_version_str}/ubuntu"
    ros_deb_line="deb [arch=$(dpkg --print-architecture) signed-by=${gpg_file}] ${url} ${version_codename} main"
    ros_list_file="/etc/apt/sources.list.d/ros.list"

    log "Adding custom ROS deb line to file '${ros_list_file}'"
    echo "${ros_deb_line}" | tee "${ros_list_file}" >/dev/null

    packages+=("${ros_apt_source_package}")
fi

install_packages "${packages[@]}"

# If the file '${ros_list_file}' was created, it means that the ROS list file and the associated GPG
# file were created, and the package '${ros_apt_source_package}' was installed.
# If this is the case, we will remove the file and the GPG key file.
if [ -n "${ros_list_file}" ]; then
    rm -f "${ros_list_file}"
    rm -f "${gpg_file}"
fi

{% if use_environment %}
# Check if the ${env_line} exists in the file bashrc files.
env_line='[ -f "${HOME}/.environment.sh" ] && . "${HOME}/.environment.sh"'

if ! grep -Fxq "${env_line}" "${img_user_home}/.bashrc"; then
    log "Adding line '${env_line}' to file '${img_user_home}/.bashrc'"
    sudo -h -u "${img_user}" bash -c 'echo "# --------------------------------------" >> "${img_user_home}/.bashrc"'
    sudo -h -u "${img_user}" bash -c 'echo "${env_line}" >> "${img_user_home}/.bashrc"'
else
    log "Line '${env_line}' already exists in file '${img_user_home}/.bashrc'"
fi
{% endif %}

log "Removing installation residues from apt cache"
apt-get autoclean
apt-get autoremove --purge -y
apt-get clean
rm -rf /var/lib/apt/lists/* 1>/dev/null 2>&1
