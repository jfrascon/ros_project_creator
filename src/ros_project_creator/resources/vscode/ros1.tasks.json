{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "build Release",
            "type": "shell",
            // If new .msg or .srv files are added, they will not be detected until you force CMake
            // to run again, for that reason --force-cmake is added
            // Tell clang-tidy that anything in /usr and /opt/ros is a system header by changing
            // flag -I with flag -isystem. This way the compiler does not emit warning for the
            // files under these paths, since as a developer I do not have to change those files.
            "command": "catkin build -j$(nproc) --force-cmake --cmake-args -DCMAKE_CXX_STANDARD=<cpp_standard_num> -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_BUILD_TYPE:STRING=Release -DCMAKE_WARN_DEPRECATED=OFF -Wno-dev && find \"${workspaceFolder}/build\" -iname \"compile_commands.json\" | xargs --no-run-if-empty jq -s 'map(.[])' > \"${workspaceFolder}/compile_commands.json\" && sed -i -e 's@-I\\s\\?/opt/ros@-isystem /opt/ros@g' -e 's@-I\\s\\?/usr@-isystem /usr@g' \"${workspaceFolder}/compile_commands.json\"",
            "options": {
                "env": {}
            },
            "problemMatcher": [],
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            }
        },
        {
            "label": "build Debug",
            "type": "shell",
            "command": "catkin build -j$(nproc) --force-cmake --cmake-args -DCMAKE_CXX_STANDARD=<cpp_standard_num> -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_BUILD_TYPE:STRING=Debug -DCMAKE_WARN_DEPRECATED=OFF -Wno-dev && find \"${workspaceFolder}/build\" -iname \"compile_commands.json\" | xargs --no-run-if-empty jq -s 'map(.[])' > \"${workspaceFolder}/compile_commands.json\" && sed -i -e 's@-I\\s\\?/opt/ros@-isystem /opt/ros@g' -e 's@-I\\s\\?/usr@-isystem /usr@g' \"${workspaceFolder}/compile_commands.json\"",
            "options": {
                "env": {}
            },
            "problemMatcher": [],
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            }
        },
        {
            "label": "build RelWithDebInfo",
            "type": "shell",
            "command": "catkin build -j$(nproc) --force-cmake --cmake-args -DCMAKE_CXX_STANDARD=<cpp_standard_num> -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_BUILD_TYPE:STRING=RelWithDebInfo -DCMAKE_WARN_DEPRECATED=OFF -Wno-dev && find \"${workspaceFolder}/build\" -iname \"compile_commands.json\" | xargs --no-run-if-empty jq -s 'map(.[])' > \"${workspaceFolder}/compile_commands.json\" && sed -i -e 's@-I\\s\\?/opt/ros@-isystem /opt/ros@g' -e 's@-I\\s\\?/usr@-isystem /usr@g' \"${workspaceFolder}/compile_commands.json\"",
            "options": {
                "env": {}
            },
            "problemMatcher": [],
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            }
        },
        {
            "label": "clean",
            "type": "shell",
            "command": "catkin",
            "args": [
                "clean",
                "--yes",
                "--verbose",
                "--force"
            ],
            "options": {},
            "problemMatcher": [],
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            }
        },
        {
            "label": "echo predefined variables",
            "type": "shell",
            "command": "echo workspaceFolder: ${workspaceFolder} && echo workspaceFolderBasename: ${workspaceFolderBasename} && echo file: ${file} && echo fileWorkspaceFolder: ${fileWorkspaceFolder} && echo relativeFile: ${relativeFile} && echo relativeFileDirname: ${relativeFileDirname} && echo fileBasename: ${fileBasename} && echo fileBasenameNoExtension: ${fileBasenameNoExtension} && echo fileDirname: ${fileDirname} && echo fileExtname: ${fileExtname} && echo cwd: ${cwd}",
            "problemMatcher": [],
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            }
        }
    ]
}